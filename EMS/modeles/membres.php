<?phprequire_once CHEMIN_LIB.'form.php';class membre {	private $id;	private $nom;	private $prenom;	private $nomMoto;	private $marqueMoto;	private $typeMoto;	private $roleAsso;	private $dateNaissance;	private $photo;	private $sexe;	private $typeMembre;	private $inactif;	private $dateCreation;	private $dateMaj;	private static $choixSexe = array(	SEXE_MASCULIN => 'Homme',										SEXE_FEMININ => 'Femme');	private static $choixTypeMembre = array(TYPE_MEMBRE_MOTARD => 'Motard',											TYPE_MEMBRE_PIETON => 'Piéton');	private static $choixTypeMoto = array(	TYPE_MOTO_CUSTOM => 'Custom',											TYPE_MOTO_GT => 'GT',											TYPE_MOTO_ROADSTER => 'Roadster',											TYPE_MOTO_ROUTIERE => 'Routière',											TYPE_MOTO_SPORTIVE => 'sportive',											TYPE_MOTO_TRAIL => 'Trail',											TYPE_MOTO_AUCUNE => '');	public function __construct($id)	{		$this->id = $id;	}	public function getId() {		return $this->id;	}	public function getNom() {		return $this->nom;	}	public function getPrenom() {		return $this->prenom;	}	/**	 * Charge le membre depuis la BD par son ID	 */	public function load() {		$pdo = PDO2::getInstance();		$requete = $pdo->prepare("SELECT * FROM membres where id = :id_utilisateur");		$requete->bindValue(':id_utilisateur', $this->id);		$requete->execute();		if ($result = $requete->fetch(PDO::FETCH_ASSOC)) {			$requete->closeCursor();			$this->nom = $result['nom'];			$this->prenom = ($result['prenom']);			$this->nomMoto = ($result['nom_moto']);			$this->marqueMoto = ($result['marque_moto']);			$this->typeMoto = ($result['type_moto']);			$this->roleAsso = ($result['role_asso']);			$this->dateNaissance = ($result['date_naissance']);			$this->photo = ($result['photo']);			$this->sexe = ($result['sexe']);			$this->dateCreation = ($result['date_creation']);			$this->dateMaj = ($result['date_maj']);			$this->typeMembre = ($result['type_membre']);			$this->inactif = ($result['inactif']);		}	}	/**	 * Retourne la liste des propri�t�s de l'objet sous forme de tableau	 * @return multitype:array	 */	public function getProperties() {		return get_object_vars($this);	}	/**	 * Crée le formulaire permettant l'édition d'un membre	 */	public function formulaireEdition() {		$arrSexe = $this->selectSexe();		$arrTypeMembre = $this->selectTypeMembre();		$arrTypeMoto = $this->selectTypeMoto();		$form_membre = new Form('formulaire_membre');		$form_membre->method('POST');		if ($this->inactif) {			$form_membre->add('Checkbox', 'inactif')			->label('Inactif')			->value($this->inactif)			->required(false)			->checked();		}else {			$form_membre->add('Checkbox', 'inactif')			->label('Inactif')			->value($this->inactif)			->required(false);		}		$form_membre->add('Text', 'nom')		->label("Nom")		->value($this->nom);		$form_membre->add('Text', 'prenom')		->label("Prenom")		->value($this->prenom);		$form_membre->add('Select', 'sexe')		->label("Sexe")->choices($arrSexe['choix'])		->value($this->sexe);		$form_membre->add('Text', 'date_naissance')		->label("Date denaissance")		->value($this->dateNaissance)		->required(false);		$form_membre->add('Text', 'marque_moto')		->label("Marque de la moto")		->value($this->marqueMoto)		->required(false);		$form_membre->add('Text', 'nom_moto')		->label("Nom de la moto")		->value($this->nomMoto)		->required(false);		$form_membre->add('Select', 'type_moto')		->label("Type de la moto")->choices($arrTypeMoto['choix'])		->value($this->typeMoto)		->required(false);		$form_membre->add('Text', 'role_asso')		->label("Rôle")		->value($this->roleAsso)		->required(false);		$form_membre->add('Select', 'type_membre')		->label("Type de membre")->choices($arrTypeMembre['choix'])		->value($this->typeMembre);		$form_membre->add('Text', 'photo')		->label("Photo")		->value($this->photo)		->required(false);		$form_membre->add('Submit', 'submit')		->value("Enregistrer");		$form_membre->add('Date', 'date_maj')		->label("Date de MAJ")		->disabled()		->value($this->dateMaj)		->required(false);		$form_membre->add('Date', 'date_creation')		->label("Date de création")		->value($this->dateCreation)		->disabled()		->required(false);		return $form_membre;	}	/**	 * Met a jour le membre courant d'apres les informations contenu dans le formulaire $form	 */	public function update($form) {		list($this->nom, $this->prenom, $this->sexe, $this->dateNaissance, $this->marqueMoto, $this->nomMoto, $this->typeMoto, $this->roleAsso, $this->typeMembre, $this->photo, $this->inactif) =		$form->get_cleaned_data('nom', 'prenom', 'sexe', 'date_naissance', 'marque_moto', 'nom_moto', 'type_moto', 'role_asso', 'type_membre', 'photo', 'inactif');		if ($this->inactif === 'on') {			$this->inactif = '1';		}		if ($this->id === '0') {			$this->create();		}else {			$this->save();		}	}	/**	 * Retourne le choix des sexe et sexe courant	 * @return multitype:multitype:string  mixed	 */	public function selectSexe() {		return array('choix' => membre::$choixSexe, 'selected' => $this->sexe);	}	/**	 * Retourne le choix des types de membre et le type de membre courant	 * @return multitype:multitype:string  mixed	 */	public function selectTypeMembre() {		return array('choix' => membre::$choixTypeMembre, 'selected' => $this->typeMembre);	}	/**	 * Retourne le choix des types de moto et le type de moto courant	 * @return multitype:multitype:string  mixed	 */	public function selectTypeMoto() {		return array('choix' => membre::$choixTypeMoto, 'selected' => $this->typeMoto);	}	/**	 * Enregistre le membre en BD	 * @return string|multitype:	 */	private function save() {		$pdo = PDO2::getInstance();		$requete = $pdo->prepare("UPDATE membres SET        nom = :nom,		prenom = :prenom,		nom_moto = :nom_moto,		marque_moto = :marque_moto,		type_moto = :type_moto,		date_naissance = :date_naissance,		sexe = :sexe,		role_asso = :role_asso,		type_membre = :type_membre,		inactif = :inactif		where id = :id");	    $requete->bindValue(':nom', $this->nom);	    $requete->bindValue(':prenom',    $this->prenom);	    $requete->bindValue(':nom_moto',    $this->nomMoto);	    $requete->bindValue(':marque_moto',    $this->marqueMoto);	    $requete->bindValue(':type_moto',    $this->typeMoto);	    $requete->bindValue(':date_naissance',    $this->dateNaissance);	    $requete->bindValue(':sexe',    $this->sexe);	    $requete->bindValue(':role_asso',    $this->roleAsso);	    $requete->bindValue(':type_membre',    $this->typeMembre);	    $requete->bindValue(':id',    $this->id);	    $requete->bindValue(':inactif', $this->inactif);	    if ($requete->execute()) {	        return $pdo->lastInsertId();	    }	    //$requete->closeCursor();	    return $requete->errorInfo();	}	/**	 * Dresse le listing des membres	 * @return multitype:membre	 */	public static function listing() {		$membres = array();		$pdo = PDO2::getInstance();		$requete = $pdo->prepare("SELECT * FROM membres");		$requete->execute();		while ($result = $requete->fetch(PDO::FETCH_ASSOC)) {			$membre = new membre($result['id']);			$membre->load();			$membres[] = $membre;		}		$requete->closeCursor();		return $membres;	}	private function create() {		$pdo = PDO2::getInstance();		$requete = $pdo->prepare("INSERT INTO membres (	nom,														prenom,														nom_moto,														marque_moto,														type_moto,														role_asso,														date_naissance,														photo,														sexe,														type_membre)												values(												        :nom,														:prenom,														:nom_moto,														:marque_moto,														:type_moto,														:role_asso,														:date_naissance,														:photo,														:sexe,														:type_membre												)");		$requete->bindValue(':nom', $this->nom);		$requete->bindValue(':prenom',    $this->prenom);		$requete->bindValue(':nom_moto',    $this->nomMoto);		$requete->bindValue(':marque_moto',    $this->marqueMoto);		$requete->bindValue(':type_moto',    $this->typeMoto);		$requete->bindValue(':role_asso',    $this->roleAsso);		$requete->bindValue(':date_naissance',    $this->dateNaissance);		$requete->bindValue(':photo',    $this->photo);		$requete->bindValue(':sexe',    $this->sexe);		$requete->bindValue(':type_membre',    $this->typeMembre);		if ($requete->execute()) {			$this->id = $pdo->lastInsertId();			return $pdo->lastInsertId();		}		$requete->closeCursor();		return $requete->errorInfo();	}	public function delete() {		$pdo = PDO2::getInstance();		$requete = $pdo->prepare("DELETE FROM membres		where id = :id_membre");		$requete->bindValue(':id_membre', $this->id);		if ($requete->execute()) {			return true;		}else {			error_log('BCT : ' . var_export($requete->errorInfo(), true));			return $requete->errorInfo();		}	}	public static function inactif($value) {		$inactif = array ('0' => MEMBRE_INACTIF_NON, '1' => MEMBRE_INACTIF_OUI);		if (array_key_exists($value, $inactif)) {			return $inactif[$value];		}else {			return '';		}	}}